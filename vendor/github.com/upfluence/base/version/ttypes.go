// Autogenerated by Thrift Compiler (1.0.0-upfluence)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package version

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var GoUnusedProtection__ int

// Attributes:
//  - Major
//  - Minor
//  - Patch
type SemanticVersion struct {
	Major int16 `thrift:"major,1,required" json:"major"`
	Minor int16 `thrift:"minor,2,required" json:"minor"`
	Patch int16 `thrift:"patch,3,required" json:"patch"`
}

func NewSemanticVersion() *SemanticVersion {
	return &SemanticVersion{}
}

func (p *SemanticVersion) GetMajor() int16 {
	return p.Major
}

func (p *SemanticVersion) GetMinor() int16 {
	return p.Minor
}

func (p *SemanticVersion) GetPatch() int16 {
	return p.Patch
}
func (p *SemanticVersion) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMajor bool = false
	var issetMinor bool = false
	var issetPatch bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetMajor = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetMinor = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetPatch = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMajor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Major is not set"))
	}
	if !issetMinor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Minor is not set"))
	}
	if !issetPatch {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Patch is not set"))
	}
	return nil
}

func (p *SemanticVersion) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Major = v
	}
	return nil
}

func (p *SemanticVersion) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Minor = v
	}
	return nil
}

func (p *SemanticVersion) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Patch = v
	}
	return nil
}

func (p *SemanticVersion) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SemanticVersion"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SemanticVersion) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("major", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:major: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Major)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.major (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:major: ", p), err)
	}
	return err
}

func (p *SemanticVersion) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minor", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:minor: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Minor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.minor (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:minor: ", p), err)
	}
	return err
}

func (p *SemanticVersion) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("patch", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Patch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.patch (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err)
	}
	return err
}

func (p *SemanticVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SemanticVersion(%+v)", *p)
}

// Attributes:
//  - Commit
//  - Remote
//  - Branch
type GitVersion struct {
	Commit string `thrift:"commit,1,required" json:"commit"`
	Remote string `thrift:"remote,2,required" json:"remote"`
	Branch string `thrift:"branch,3,required" json:"branch"`
}

func NewGitVersion() *GitVersion {
	return &GitVersion{}
}

func (p *GitVersion) GetCommit() string {
	return p.Commit
}

func (p *GitVersion) GetRemote() string {
	return p.Remote
}

func (p *GitVersion) GetBranch() string {
	return p.Branch
}
func (p *GitVersion) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCommit bool = false
	var issetRemote bool = false
	var issetBranch bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetCommit = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetRemote = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetBranch = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCommit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Commit is not set"))
	}
	if !issetRemote {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Remote is not set"))
	}
	if !issetBranch {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Branch is not set"))
	}
	return nil
}

func (p *GitVersion) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Commit = v
	}
	return nil
}

func (p *GitVersion) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Remote = v
	}
	return nil
}

func (p *GitVersion) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Branch = v
	}
	return nil
}

func (p *GitVersion) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GitVersion"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GitVersion) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commit", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:commit: ", p), err)
	}
	if err := oprot.WriteString(string(p.Commit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commit (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:commit: ", p), err)
	}
	return err
}

func (p *GitVersion) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remote", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remote: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remote)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remote (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remote: ", p), err)
	}
	return err
}

func (p *GitVersion) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("branch", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:branch: ", p), err)
	}
	if err := oprot.WriteString(string(p.Branch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.branch (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:branch: ", p), err)
	}
	return err
}

func (p *GitVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GitVersion(%+v)", *p)
}

// Attributes:
//  - SemanticVersion
//  - GitVersion
type Version struct {
	SemanticVersion *SemanticVersion `thrift:"semantic_version,1" json:"semantic_version,omitempty"`
	GitVersion      *GitVersion      `thrift:"git_version,2" json:"git_version,omitempty"`
}

func NewVersion() *Version {
	return &Version{}
}

var Version_SemanticVersion_DEFAULT *SemanticVersion

func (p *Version) GetSemanticVersion() *SemanticVersion {
	if !p.IsSetSemanticVersion() {
		return Version_SemanticVersion_DEFAULT
	}
	return p.SemanticVersion
}

var Version_GitVersion_DEFAULT *GitVersion

func (p *Version) GetGitVersion() *GitVersion {
	if !p.IsSetGitVersion() {
		return Version_GitVersion_DEFAULT
	}
	return p.GitVersion
}
func (p *Version) IsSetSemanticVersion() bool {
	return p.SemanticVersion != nil
}

func (p *Version) IsSetGitVersion() bool {
	return p.GitVersion != nil
}

func (p *Version) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Version) ReadField1(iprot thrift.TProtocol) error {
	p.SemanticVersion = NewSemanticVersion()
	if err := p.SemanticVersion.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SemanticVersion), err)
	}
	return nil
}

func (p *Version) ReadField2(iprot thrift.TProtocol) error {
	p.GitVersion = NewGitVersion()
	if err := p.GitVersion.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GitVersion), err)
	}
	return nil
}

func (p *Version) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Version"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Version) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSemanticVersion() {
		if err := oprot.WriteFieldBegin("semantic_version", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:semantic_version: ", p), err)
		}
		if err := p.SemanticVersion.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SemanticVersion), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:semantic_version: ", p), err)
		}
	}
	return err
}

func (p *Version) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetGitVersion() {
		if err := oprot.WriteFieldBegin("git_version", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:git_version: ", p), err)
		}
		if err := p.GitVersion.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GitVersion), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:git_version: ", p), err)
		}
	}
	return err
}

func (p *Version) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Version(%+v)", *p)
}
